from keys import API_KEY, API_SECRET
import time
import requests
import hmac
import hashlib
import uuid
import json

api_key=API_KEY
secret_key=API_SECRET
httpClient=requests.Session()
recv_window=str(5000)
url="https://api.mexc.com" # main endpoint
coin = "TOKEN"
qty = 1

def make_request(endPoint,method,payload,Info, coin):
    global time_stamp
    time_stamp=str(int(time.time() * 10 ** 3))
    signature=genSignature(payload)
    headers = {
        'X-BAPI-API-KEY': api_key,
        'X-BAPI-SIGN': signature,
        'X-BAPI-SIGN-TYPE': '2',
        'X-BAPI-TIMESTAMP': time_stamp,
        'X-BAPI-RECV-WINDOW': recv_window,
        'Content-Type': 'application/json'
    }
    if(method=="POST"):
        response = httpClient.request(method, url+endPoint, headers=headers, data=payload)
    else:
        response = httpClient.request(method, url+endPoint+"?"+payload, headers=headers)
    print(response.text)
    print(Info + "Elapsed Time : " + str(response.elapsed))
    try:
        if Info == 'Spread':
            response_json = json.loads(response.text)
            bid_price = response_json['bidPrice']
            print(bid_price)
            return bid_price
        elif Info == 'Open_position':
            response_json = json.loads(response.text)
            for balance in response_json['result']['balances']:
                if balance['coin'] == coin:
                    print(balance['total'])
                    return balance['total']
        elif Info == 'minTradeQty':
            response_json = json.loads(response.text)
            for balance in response_json['result']['list']:
                if balance['baseCoin'] == coin:
                    return balance['minTradeQty']
    except KeyError:
        print("Something Error")
    return 0

def genSignature(payload):
    param_str= str(time_stamp) + api_key + recv_window + payload
    hash = hmac.new(bytes(secret_key, "utf-8"), param_str.encode("utf-8"),hashlib.sha256)
    signature = hash.hexdigest()
    return signature

#spread
endpoint="/api/v3/ticker/bookTicker"
method="GET"
params=f'symbol={coin}USDT'
bid_price = float(make_request(endpoint,method,params,"Spread", coin))
print(bid_price)

time.sleep(0.05)

#Create Order
endpoint="/api/v3/order"
x = round((bid_price - 0.008 * bid_price), 4)
# x = 0.12345
print(x)
method="POST"
orderLinkId1=uuid.uuid4().hex
params = f'{{"symbol": "{coin}USDT","side": "BUY","type": "LIMIT","quantity": "{qty}","price": "{x}","newClientOrderId": "{orderLinkId1}"}}'
# params = f'symbol={coin}USDT&side=BUY&type=LIMIT&quantity={qty}&price={x}&newClientOrderId={orderLinkId1}'
print(params)
make_request(endpoint,method,params,"Create", coin)

time.sleep(0.05)
